{"version":3,"sources":["components/Home/Home.js","components/showImage.js","components/showDescription.js","containers/showContainer.js","components/Footer.js","components/Scroll.js","components/Searchbox.js","components/Shows/Shows.js","containers/App.js","serviceWorker.js","index.js"],"names":["Home","Component","showImage","style","height","className","showDescription","showContainer","Footer","Scroll","props","overflowY","children","Searchbox","searchfield","searchChange","type","placeholder","onChange","Shows","App","to","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAceA,E,uKATX,OACE,6BACE,qDACA,8E,GALWC,aC+BJC,EA9BG,WACd,OACI,yBACIC,MAAO,CAAEC,OAAQ,SACjBC,UAAU,wDACV,wBAAIA,UAAU,aAAd,kBCQGC,EAbS,WACpB,OACI,yBACIH,MAAO,CAAEC,OAAQ,SACjBC,UAAU,wDACV,wBAAIA,UAAU,aAAd,wBCMGE,EAVO,WAClB,OACI,yBAAKF,UAAU,oCACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCUGG,EAfA,WACX,OACI,yBACAL,MAAO,CAAGC,OAAO,QACjBC,UAAU,0CCQHI,EAdA,SAACC,GACZ,OACI,yBAAKP,MAAO,CACRQ,UAAW,SACXP,OAAQ,SAIXM,EAAME,WCIAC,EAZG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC9B,OACI,yBAAKV,UAAU,uCACf,2BACAA,UAAU,6CACVW,KAAK,SACLC,YAAY,eACZC,SAAUH,MCgBHI,E,uKAhBP,OACI,6BACG,kBAAC,EAAD,MACD,kBAAC,EAAD,KACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEA,kBAAC,EAAD,W,GAXMlB,a,OCuBLmB,MAtBf,WACE,OACE,yBAAKf,UAAU,OACb,6BACA,kBAAC,IAAD,CAAMgB,GAAG,KACT,uCAEI,kBAAC,IAAD,CAAMA,GAAG,UACP,uCAIN,8BAEA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWxB,IACjC,kBAAC,IAAD,CAAOsB,KAAK,SAASE,UAAWL,KAEhC,kBAAC,EAAD,Q,MCbcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.064d16bf.chunk.js","sourcesContent":["  \nimport React, { Component } from \"react\";\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <h1>This is the homepage!</h1>\n        <p>Where all of your tv show dreams come true</p>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React from 'react';\n\n\n\nconst showImage = () => {\n    return (\n        <div\n            style={{ height: \"175px\" }}\n            className=\" w-25 bg-red ma4 pa0 tc align-center justify-center \">\n            <h1 className=\" ma0 pa0 \"> Show Image </h1>\n\n\n        </div>\n    )\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default showImage;","import React from 'react';\n\n\n\nconst showDescription = () => {\n    return (\n        <div\n            style={{ height: \"175px\"  }}\n            className=\" w-75 bg-red ma4 pa0 tc align-center justify-center \">\n            <h1 className=\" ma0 pa0 \"> Show Description </h1>\n\n\n        </div>\n    )\n}\n\n\nexport default showDescription;","import React from 'react';\nimport Showimage from '../components/showImage';\nimport Showdescription from '../components/showDescription'\n\n\nconst showContainer = () => {\n    return (\n        <div className=\" w-100 bg-white ma0 pa0 tc flex \">\n            <Showimage/>\n            <Showdescription/>\n        </div>\n    )\n}\n\n\nexport default showContainer;","import React from 'react';\n\n\n\nconst Footer = () => {\n    return (\n        <nav \n        style={{  height:\"12vh\" }}\n        className=\" tc bg-yellow pa0 ma0 w-100 shadow-5\">\n        </nav>\n    )\n}\n\n\n\n\n\n\n\nexport default Footer;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{             \n            overflowY: 'scroll',\n            height: '75vh'\n        }}>\n\n\n        {props.children}\n        </div>\n    )\n    \n}\n\nexport default Scroll; ","import React from 'react';\n\nconst Searchbox = ({ searchfield, searchChange}) => {\n    return (\n        <div className='p2 flex align-center justify-center'>\n        <input \n        className=\" pa3 ma3 br4 ba b--green bg-lightest-blue \"\n        type=\"search\" \n        placeholder=\"search shows\"\n        onChange={searchChange} />\n        </div>\n    )\n}\n\nexport default Searchbox;","import React, { Component } from 'react';\nimport Showcontainer from '../../containers/showContainer';\nimport Footer from '../Footer';\nimport Scroll from '../Scroll';\nimport SearchBox from '../Searchbox'\n\n\nclass Shows extends Component {\n    render() {\n        return (\n            <div>\n               <SearchBox/>\n              <Scroll>\n              <Showcontainer/>\n              <Showcontainer/>\n              <Showcontainer/>\n              <Showcontainer/>\n              </Scroll>\n              <Footer/>\n            </div>\n          );\n    }\n \n}\n\nexport default Shows;","import React from 'react';\nimport './App.css';\nimport Home from '../components/Home/Home';\nimport Shows from '../components/Shows/Shows';\nimport Footer from '../components/Footer';\nimport { Route, Link } from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav>\n      <Link to=\"/\"> \n      <h1> Home </h1>\n      </Link>\n          <Link to=\"/shows\">\n            <h1>Shows</h1>\n          </Link>\n          \n      </nav>\n      <main>\n\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/shows\" component={Shows} />\n      </main>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}